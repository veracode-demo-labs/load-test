{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scans/179dc402-169b-4917-b4fe-9da30aa641b9/findings"
    },
    "help": {
      "href": "https://help.veracode.com/reader/tS9CaFwL4_lbIEWWomsJoA/ovfZGgu96UINQxIuTqRDwg"
    }
  },
  "scan_id": "179dc402-169b-4917-b4fe-9da30aa641b9",
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 194106 bytes",
  "modules": [
    "app.dll"
  ],
  "modules_count": 1,
  "findings": [
    {
      "title": "system_diagnostics_process_dll.System.Diagnostics.Process.Start",
      "issue_id": 1023,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "cwe_id": "78",
      "display_text": "\u003cspan\u003eThis call to system_diagnostics_process_dll.System.Diagnostics.Process.Start() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. Start() was called on an object, which contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.ToolsController.Tools.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/toolscontroller.cs",
          "line": 68,
          "function_name": "Ping",
          "qualified_function_name": "app_dll.Verademo.Controllers.ToolsController.Ping",
          "function_prototype": "string Ping(string)",
          "scope": "app_dll.Verademo.Controllers.ToolsController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1919917311",
        "prototype_hash": "1598682546",
        "flaw_hash": "1728330308",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/78.html"
    },
    {
      "title": "system_diagnostics_process_dll.System.Diagnostics.Process.Start",
      "issue_id": 1022,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "cwe_id": "78",
      "display_text": "\u003cspan\u003eThis call to system_diagnostics_process_dll.System.Diagnostics.Process.Start() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. Start() was called on an object, which contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.ToolsController.Tools.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/toolscontroller.cs",
          "line": 102,
          "function_name": "Fortune",
          "qualified_function_name": "app_dll.Verademo.Controllers.ToolsController.Fortune",
          "function_prototype": "string Fortune(string)",
          "scope": "app_dll.Verademo.Controllers.ToolsController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1540053917",
        "prototype_hash": "272474949",
        "flaw_hash": "1728330308",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/78.html"
    },
    {
      "title": "system_data_common_dll.System.Data.IDbCommand.ExecuteReader",
      "issue_id": 1051,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on an object, which contains tainted data. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/blabcontroller.cs",
          "line": 97,
          "function_name": "PostSearchBlabs",
          "qualified_function_name": "app_dll.Verademo.Controllers.BlabController.PostSearchBlabs",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostSearchBlabs(string)",
          "scope": "app_dll.Verademo.Controllers.BlabController"
        }
      },
      "flaw_match": {
        "procedure_hash": "2738164519",
        "prototype_hash": "802801291",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "system_data_common_dll.System.Data.IDbCommand.ExecuteReader",
      "issue_id": 1050,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on an object, which contains tainted data. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/blabcontroller.cs",
          "line": 261,
          "function_name": "PopulateBlabbersViewModel",
          "qualified_function_name": "app_dll.Verademo.Controllers.BlabController.PopulateBlabbersViewModel",
          "function_prototype": "Models.BlabbersViewModel PopulateBlabbersViewModel(string, string)",
          "scope": "app_dll.Verademo.Controllers.BlabController"
        }
      },
      "flaw_match": {
        "procedure_hash": "717944286",
        "prototype_hash": "3414677046",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "entityframework_dll.System.Data.Entity.Database.SqlQuery",
      "issue_id": 1087,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to entityframework_dll.System.Data.Entity.Database.SqlQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to SqlQuery() contains tainted data from the variable Concat(). \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/authcontrollerbase.cs",
          "line": 24,
          "function_name": "LoginUser",
          "qualified_function_name": "app_dll.Verademo.Controllers.AuthControllerBase.LoginUser",
          "function_prototype": "Models.BasicUser LoginUser(string, string)",
          "scope": "app_dll.Verademo.Controllers.AuthControllerBase"
        }
      },
      "flaw_match": {
        "procedure_hash": "3420093271",
        "prototype_hash": "2874803151",
        "flaw_hash": "530692030",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1159865577",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "system_data_common_dll.System.Data.IDbCommand.ExecuteReader",
      "issue_id": 1048,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on an object, which contains tainted data. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 368,
          "function_name": "PopulateProfileViewModel",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PopulateProfileViewModel",
          "function_prototype": "void PopulateProfileViewModel(System.Data.Common.DbConnection, string, Models.ProfileViewModel)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "76961540",
        "prototype_hash": "2898892725",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "system_data_common_dll.System.Data.IDbCommand.ExecuteReader",
      "issue_id": 1049,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on an object, which contains tainted data. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 459,
          "function_name": "RetrieveMyEvents",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.RetrieveMyEvents",
          "function_prototype": "System.Collections.Generic.List\u003cstring\u003e RetrieveMyEvents(System.Data.Common.DbConnection, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "660987123",
        "prototype_hash": "3418887854",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "system_data_common_dll.System.Data.IDbCommand.ExecuteScalar",
      "issue_id": 1053,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteScalar() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteScalar() was called on an object, which contains tainted data. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/removeaccountcommand.cs",
          "line": 31,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.RemoveAccountCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.RemoveAccountCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "283295601",
        "prototype_hash": "3733745774",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery",
      "issue_id": 1047,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on an object, which contains tainted data. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/removeaccountcommand.cs",
          "line": 38,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.RemoveAccountCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.RemoveAccountCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "283295601",
        "prototype_hash": "3733745774",
        "flaw_hash": "1728330308",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery",
      "issue_id": 1046,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on an object, which contains tainted data. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/removeaccountcommand.cs",
          "line": 43,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.RemoveAccountCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.RemoveAccountCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "283295601",
        "prototype_hash": "3733745774",
        "flaw_hash": "1728330308",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery",
      "issue_id": 1045,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on an object, which contains tainted data. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/listencommand.cs",
          "line": 54,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.ListenCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.ListenCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "1440191860",
        "prototype_hash": "123701533",
        "flaw_hash": "1728330308",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "system_data_common_dll.System.Data.IDbCommand.ExecuteScalar",
      "issue_id": 1052,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteScalar() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteScalar() was called on an object, which contains tainted data. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/ignorecommand.cs",
          "line": 33,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.IgnoreCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.IgnoreCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "2246419784",
        "prototype_hash": "228764203",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 5,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery",
      "issue_id": 1044,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on an object, which contains tainted data. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/ignorecommand.cs",
          "line": 44,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.IgnoreCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.IgnoreCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "2246419784",
        "prototype_hash": "228764203",
        "flaw_hash": "1728330308",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/89.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw",
      "issue_id": 1041,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Raw() contains tainted data from the variable Concat(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.ToolsController.Tools.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/views/tools/tools.cshtml",
          "line": 17,
          "function_name": "MoveNext",
          "qualified_function_name": "app_dll.AspNetCoreGeneratedDocument.Views_Tools_Tools._3C_3CExecuteAsync_3Eb__12_0_3Ed.MoveNext",
          "function_prototype": "void MoveNext()",
          "scope": "app_dll.AspNetCoreGeneratedDocument.Views_Tools_Tools._3C_3CExecuteAsync_3Eb__12_0_3Ed"
        }
      },
      "flaw_match": {
        "procedure_hash": "146763016",
        "prototype_hash": "4146034803",
        "flaw_hash": "13538970",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3407848892",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1538899680",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write",
      "issue_id": 1057,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable \\\u003c\\\u003e4__this.get_Html().Raw(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.ToolsController.Tools.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/views/tools/tools.cshtml",
          "line": 17,
          "function_name": "MoveNext",
          "qualified_function_name": "app_dll.AspNetCoreGeneratedDocument.Views_Tools_Tools._3C_3CExecuteAsync_3Eb__12_0_3Ed.MoveNext",
          "function_prototype": "void MoveNext()",
          "scope": "app_dll.AspNetCoreGeneratedDocument.Views_Tools_Tools._3C_3CExecuteAsync_3Eb__12_0_3Ed"
        }
      },
      "flaw_match": {
        "procedure_hash": "146763016",
        "prototype_hash": "4146034803",
        "flaw_hash": "13538970",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2418586248",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3587935283",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw",
      "issue_id": 1039,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Raw() contains tainted data from the variable \\\u003cpost\\\u003e5__4.get_Content(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/views/blab/feed.cshtml",
          "line": 42,
          "function_name": "MoveNext",
          "qualified_function_name": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13.MoveNext",
          "function_prototype": "void MoveNext()",
          "scope": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13"
        }
      },
      "flaw_match": {
        "procedure_hash": "126819471",
        "prototype_hash": "4146034803",
        "flaw_hash": "2286721355",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2590521056",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2439302015",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write",
      "issue_id": 1058,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable \\\u003c\\\u003e4__this.get_Html().Raw(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/views/blab/feed.cshtml",
          "line": 42,
          "function_name": "MoveNext",
          "qualified_function_name": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13.MoveNext",
          "function_prototype": "void MoveNext()",
          "scope": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13"
        }
      },
      "flaw_match": {
        "procedure_hash": "126819471",
        "prototype_hash": "4146034803",
        "flaw_hash": "2286721355",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3474518301",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3276576336",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw",
      "issue_id": 1040,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Raw() contains tainted data from the variable \\\u003cpost\\\u003e5__6.get_Content(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/views/blab/feed.cshtml",
          "line": 83,
          "function_name": "MoveNext",
          "qualified_function_name": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13.MoveNext",
          "function_prototype": "void MoveNext()",
          "scope": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13"
        }
      },
      "flaw_match": {
        "procedure_hash": "126819471",
        "prototype_hash": "4146034803",
        "flaw_hash": "2286721355",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2590521056",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2439302015",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write",
      "issue_id": 1061,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable \\\u003c\\\u003e4__this.get_Html().Raw(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/views/blab/feed.cshtml",
          "line": 83,
          "function_name": "MoveNext",
          "qualified_function_name": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13.MoveNext",
          "function_prototype": "void MoveNext()",
          "scope": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13"
        }
      },
      "flaw_match": {
        "procedure_hash": "126819471",
        "prototype_hash": "4146034803",
        "flaw_hash": "2286721355",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3474518301",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3276576336",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw",
      "issue_id": 1042,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Raw() contains tainted data from the variable \\\u003ccomment\\\u003e5__3.get_Content(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/views/blab/blab.cshtml",
          "line": 59,
          "function_name": "MoveNext",
          "qualified_function_name": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Blab._3CExecuteAsync_3Ed__13.MoveNext",
          "function_prototype": "void MoveNext()",
          "scope": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Blab._3CExecuteAsync_3Ed__13"
        }
      },
      "flaw_match": {
        "procedure_hash": "530259974",
        "prototype_hash": "4146034803",
        "flaw_hash": "2286721355",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2590521056",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2439302015",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write",
      "issue_id": 1055,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable \\\u003c\\\u003e4__this.get_Html().Raw(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/views/blab/blab.cshtml",
          "line": 59,
          "function_name": "MoveNext",
          "qualified_function_name": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Blab._3CExecuteAsync_3Ed__13.MoveNext",
          "function_prototype": "void MoveNext()",
          "scope": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Blab._3CExecuteAsync_3Ed__13"
        }
      },
      "flaw_match": {
        "procedure_hash": "530259974",
        "prototype_hash": "4146034803",
        "flaw_hash": "2286721355",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3474518301",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3276576336",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "Server\u003d127.0.0.1,1433?Database\u003dVerademo?User\u003dsa?Password\u003dSuperSecurePassw0rd",
      "issue_id": 1020,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Credentials",
      "cwe_id": "798",
      "display_text": "\u003cspan\u003eThe application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. Server\u003d127.0.0.1,1433?Database\u003dVerademo?User\u003dsa?Password\u003dSuperSecurePassw0rd\u003c/span\u003e \u003cspan\u003eStore credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/data/applicationdbcontext.cs",
          "line": 9,
          "function_name": "!ctor",
          "qualified_function_name": "app_dll.Verademo.Data.ApplicationDbContext.!ctor",
          "function_prototype": "void !ctor()",
          "scope": "app_dll.Verademo.Data.ApplicationDbContext"
        }
      },
      "flaw_match": {
        "procedure_hash": "3337343023",
        "prototype_hash": "4146034803",
        "flaw_hash": "3914834267",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2478654182",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/798.html"
    },
    {
      "title": "Tools",
      "issue_id": 1009,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Cross-Site Request Forgery (CSRF)",
      "cwe_id": "352",
      "display_text": "\u003cspan\u003eThe ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The Tools() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.\u003c/span\u003e\u003cspan\u003eMake sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateAntiForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It\u0027s also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352.html\"\u003eCWE\u003c/a\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\"\u003ePrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core\u003c/a\u003e\u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/toolscontroller.cs",
          "line": 32,
          "function_name": "Tools",
          "qualified_function_name": "app_dll.Verademo.Controllers.ToolsController.Tools",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult Tools(string, string)",
          "scope": "app_dll.Verademo.Controllers.ToolsController"
        }
      },
      "flaw_match": {
        "procedure_hash": "3308814847",
        "prototype_hash": "3010171578",
        "flaw_hash": "3308814847",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/352.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1081,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable Concat(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.ToolsController.Tools.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/toolscontroller.cs",
          "line": 53,
          "function_name": "Ping",
          "qualified_function_name": "app_dll.Verademo.Controllers.ToolsController.Ping",
          "function_prototype": "string Ping(string)",
          "scope": "app_dll.Verademo.Controllers.ToolsController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1919917311",
        "prototype_hash": "1598682546",
        "flaw_hash": "506747691",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "746067874",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "4142356284",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "PostReset",
      "issue_id": 1008,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Cross-Site Request Forgery (CSRF)",
      "cwe_id": "352",
      "display_text": "\u003cspan\u003eThe ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostReset() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.\u003c/span\u003e\u003cspan\u003eMake sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateAntiForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It\u0027s also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352.html\"\u003eCWE\u003c/a\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\"\u003ePrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core\u003c/a\u003e\u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 69,
          "function_name": "PostReset",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.PostReset",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostReset(string, string)",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "2073103981",
        "prototype_hash": "1699864706",
        "flaw_hash": "2073103981",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/352.html"
    },
    {
      "title": "system_runtime_dll.System.Random.Next",
      "issue_id": 1025,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "reliability",
      "issue_type": "Insufficient Entropy",
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 147,
          "function_name": "AddListeners",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddListeners",
          "function_prototype": "void AddListeners(System.Data.Common.DbConnection)",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1390337275",
        "prototype_hash": "3830803220",
        "flaw_hash": "2853667181",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1260355564",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/331.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1079,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable Concat(). The tainted data originated from an earlier call to app_dll.VirtualController.vc_mvcentry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 152,
          "function_name": "AddListeners",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddListeners",
          "function_prototype": "void AddListeners(System.Data.Common.DbConnection)",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1390337275",
        "prototype_hash": "3830803220",
        "flaw_hash": "3393271805",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1531322778",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1582283127",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1080,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable Concat(). The tainted data originated from an earlier call to app_dll.VirtualController.vc_mvcentry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 173,
          "function_name": "AddUserData",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddUserData",
          "function_prototype": "void AddUserData(Data.ApplicationDbContext)",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "230446856",
        "prototype_hash": "39902027",
        "flaw_hash": "2931613255",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3667975473",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2625850662",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "system_runtime_dll.System.Random.Next",
      "issue_id": 1026,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "reliability",
      "issue_type": "Insufficient Entropy",
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 201,
          "function_name": "AddBlabs",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddBlabs",
          "function_prototype": "string[] AddBlabs(System.Data.Common.DbConnection)",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4117725051",
        "prototype_hash": "2314160075",
        "flaw_hash": "3366055661",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "175364160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/331.html"
    },
    {
      "title": "system_runtime_dll.System.Random.Next",
      "issue_id": 1028,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "reliability",
      "issue_type": "Insufficient Entropy",
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 204,
          "function_name": "AddBlabs",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddBlabs",
          "function_prototype": "string[] AddBlabs(System.Data.Common.DbConnection)",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4117725051",
        "prototype_hash": "2314160075",
        "flaw_hash": "1008439999",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "533638490",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/331.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1077,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable Concat(). The tainted data originated from an earlier call to app_dll.VirtualController.vc_mvcentry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 207,
          "function_name": "AddBlabs",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddBlabs",
          "function_prototype": "string[] AddBlabs(System.Data.Common.DbConnection)",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4117725051",
        "prototype_hash": "2314160075",
        "flaw_hash": "1121312079",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3339945418",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1369217858",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "system_runtime_dll.System.Random.Next",
      "issue_id": 1030,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "reliability",
      "issue_type": "Insufficient Entropy",
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 239,
          "function_name": "AddComments",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddComments",
          "function_prototype": "void AddComments(System.Data.Common.DbConnection, string[])",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4071507818",
        "prototype_hash": "2483347682",
        "flaw_hash": "537735606",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1057423377",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/331.html"
    },
    {
      "title": "system_runtime_dll.System.Random.Next",
      "issue_id": 1027,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "reliability",
      "issue_type": "Insufficient Entropy",
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 249,
          "function_name": "AddComments",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddComments",
          "function_prototype": "void AddComments(System.Data.Common.DbConnection, string[])",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4071507818",
        "prototype_hash": "2483347682",
        "flaw_hash": "37838011",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "175364160",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/331.html"
    },
    {
      "title": "system_runtime_dll.System.Random.Next",
      "issue_id": 1031,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "reliability",
      "issue_type": "Insufficient Entropy",
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 253,
          "function_name": "AddComments",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddComments",
          "function_prototype": "void AddComments(System.Data.Common.DbConnection, string[])",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4071507818",
        "prototype_hash": "2483347682",
        "flaw_hash": "1339896322",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2472777868",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/331.html"
    },
    {
      "title": "system_runtime_dll.System.Random.Next",
      "issue_id": 1029,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "reliability",
      "issue_type": "Insufficient Entropy",
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 257,
          "function_name": "AddComments",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddComments",
          "function_prototype": "void AddComments(System.Data.Common.DbConnection, string[])",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4071507818",
        "prototype_hash": "2483347682",
        "flaw_hash": "1008439999",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "533638490",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/331.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1078,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable Concat(). The tainted data originated from an earlier call to app_dll.VirtualController.vc_mvcentry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/resetcontroller.cs",
          "line": 259,
          "function_name": "AddComments",
          "qualified_function_name": "app_dll.Verademo.Controllers.ResetController.AddComments",
          "function_prototype": "void AddComments(System.Data.Common.DbConnection, string[])",
          "scope": "app_dll.Verademo.Controllers.ResetController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4071507818",
        "prototype_hash": "2483347682",
        "flaw_hash": "107772538",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2034653758",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "951771807",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "PostSearchBlabs",
      "issue_id": 1004,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Cross-Site Request Forgery (CSRF)",
      "cwe_id": "352",
      "display_text": "\u003cspan\u003eThe ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostSearchBlabs() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.\u003c/span\u003e\u003cspan\u003eMake sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateAntiForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It\u0027s also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352.html\"\u003eCWE\u003c/a\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\"\u003ePrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core\u003c/a\u003e\u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/blabcontroller.cs",
          "line": 84,
          "function_name": "PostSearchBlabs",
          "qualified_function_name": "app_dll.Verademo.Controllers.BlabController.PostSearchBlabs",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostSearchBlabs(string)",
          "scope": "app_dll.Verademo.Controllers.BlabController"
        }
      },
      "flaw_match": {
        "procedure_hash": "2738164519",
        "prototype_hash": "802801291",
        "flaw_hash": "2738164519",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/352.html"
    },
    {
      "title": "PostFeed",
      "issue_id": 1005,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Cross-Site Request Forgery (CSRF)",
      "cwe_id": "352",
      "display_text": "\u003cspan\u003eThe ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostFeed() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.\u003c/span\u003e\u003cspan\u003eMake sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateAntiForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It\u0027s also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352.html\"\u003eCWE\u003c/a\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\"\u003ePrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core\u003c/a\u003e\u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/blabcontroller.cs",
          "line": 197,
          "function_name": "PostFeed",
          "qualified_function_name": "app_dll.Verademo.Controllers.BlabController.PostFeed",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostFeed(string)",
          "scope": "app_dll.Verademo.Controllers.BlabController"
        }
      },
      "flaw_match": {
        "procedure_hash": "182615807",
        "prototype_hash": "3626207922",
        "flaw_hash": "182615807",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/352.html"
    },
    {
      "title": "PostBlabbers",
      "issue_id": 1006,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Cross-Site Request Forgery (CSRF)",
      "cwe_id": "352",
      "display_text": "\u003cspan\u003eThe ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostBlabbers() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.\u003c/span\u003e\u003cspan\u003eMake sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateAntiForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It\u0027s also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352.html\"\u003eCWE\u003c/a\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\"\u003ePrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core\u003c/a\u003e\u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/blabcontroller.cs",
          "line": 290,
          "function_name": "PostBlabbers",
          "qualified_function_name": "app_dll.Verademo.Controllers.BlabController.PostBlabbers",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostBlabbers(string, string)",
          "scope": "app_dll.Verademo.Controllers.BlabController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1310837512",
        "prototype_hash": "1260465218",
        "flaw_hash": "1310837512",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/352.html"
    },
    {
      "title": "system_runtime_dll.System.Activator.CreateInstance",
      "issue_id": 1043,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Use of Externally-Controlled Input to Select Classes or Code (\u0027Unsafe Reflection\u0027)",
      "cwe_id": "470",
      "display_text": "\u003cspan\u003eThis call to system_runtime_dll.System.Activator.CreateInstance() uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to CreateInstance() contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.BlabController.PostBlabbers.\u003c/span\u003e \u003cspan\u003eValidate the class name against a combination of white and blocklists to ensure that only expected behavior is produced.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/470.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/blabcontroller.cs",
          "line": 307,
          "function_name": "PostBlabbers",
          "qualified_function_name": "app_dll.Verademo.Controllers.BlabController.PostBlabbers",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostBlabbers(string, string)",
          "scope": "app_dll.Verademo.Controllers.BlabController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1310837512",
        "prototype_hash": "1260465218",
        "flaw_hash": "2381407009",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3152667479",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/470.html"
    },
    {
      "title": "PostBlab",
      "issue_id": 1007,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Cross-Site Request Forgery (CSRF)",
      "cwe_id": "352",
      "display_text": "\u003cspan\u003eThe ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostBlab() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.\u003c/span\u003e\u003cspan\u003eMake sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateAntiForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It\u0027s also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352.html\"\u003eCWE\u003c/a\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\"\u003ePrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core\u003c/a\u003e\u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/blabcontroller.cs",
          "line": 325,
          "function_name": "PostBlab",
          "qualified_function_name": "app_dll.Verademo.Controllers.BlabController.PostBlab",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostBlab(int, string)",
          "scope": "app_dll.Verademo.Controllers.BlabController"
        }
      },
      "flaw_match": {
        "procedure_hash": "2268814265",
        "prototype_hash": "3306893241",
        "flaw_hash": "2268814265",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/352.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1084,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable Concat(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.GetLogin.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 39,
          "function_name": "GetLogin",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.GetLogin",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult GetLogin(string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "498855800",
        "prototype_hash": "3145596507",
        "flaw_hash": "3230171136",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1074398678",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3671337604",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "newtonsoft_json_dll.Newtonsoft.Json.JsonConvert.DeserializeObject",
      "issue_id": 1021,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Deserialization of Untrusted Data",
      "cwe_id": "502",
      "display_text": "\u003cspan\u003eThe serialized-JSON data stream used in the call to newtonsoft_json_dll.Newtonsoft.Json.JsonConvert.DeserializeObject() appears to have been constructed with external (possibly untrusted) data. Because TypeNameHandling (in JsonSerializerSettings) is set to anything other than None, Newtonsoft.Json is configured to include object type information in the output and processes it from the given input. Attacker manipulation of this stream has the ability to cause the creation of objects of arbitrary serializable types. Paired with a weakness in another class\u0027s constructor, this could result in a denial of service, code execution, or data corruption vulnerability.\u003c/span\u003e \u003cspan\u003eAlways use Newtonsoft.Json with default JsonSerializerSettings or with TypeNameHandling explicitly set to None.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/502.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 62,
          "function_name": "GetLogin",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.GetLogin",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult GetLogin(string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "498855800",
        "prototype_hash": "3145596507",
        "flaw_hash": "2132712021",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/502.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Redirect",
      "issue_id": 1063,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Redirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable ReturnUrl. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.GetLogin.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 76,
          "function_name": "GetLogin",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.GetLogin",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult GetLogin(string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "498855800",
        "prototype_hash": "3145596507",
        "flaw_hash": "1663307696",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/601.html"
    },
    {
      "title": "PostLogin",
      "issue_id": 1017,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
      "cwe_id": "915",
      "display_text": "\u003cspan\u003e.NET MVC uses a feature called Model Binding to automatically map HTTP POST Form parameters to a Model indicated by the type specified in the Controller Action\u0027s method argument. Since all HTTP POST data could be under the control of an attacker, additional values may be included beyond those intended. If those additional POST parameters match the names of attributes on the model, they may be updated as well.\u003c/span\u003e \u003cspan\u003eExplicitly specify which of the Model\u0027s attributes should be accessible using the Bind attribute by setting the Include property to each allowable property. If it is not feasible to use the preferred property Include, instead specify which attributes should not be accessible using the Bind attribute and setting the Exclude property to each prohibited property. Keep in mind that when choosing to exclude properties the issue will not be resolved due to possible future additions/changes of properties on the Model.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/915.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/implementing-basic-crud-functionality-with-the-entity-framework-in-asp-net-mvc-application#overpost\"\u003eSee Security Note on Implementing Basic CRUD Functionality with the Entity Framework in ASP.NET MVC Application\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 82,
          "function_name": "PostLogin",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostLogin",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostLogin(Models.LoginView, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "190652925",
        "prototype_hash": "2908379184",
        "flaw_hash": "190652925",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/915.html"
    },
    {
      "title": "PostLogin",
      "issue_id": 1000,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Cross-Site Request Forgery (CSRF)",
      "cwe_id": "352",
      "display_text": "\u003cspan\u003eThe ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostLogin() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.\u003c/span\u003e\u003cspan\u003eMake sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateAntiForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It\u0027s also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352.html\"\u003eCWE\u003c/a\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\"\u003ePrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core\u003c/a\u003e\u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 82,
          "function_name": "PostLogin",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostLogin",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostLogin(Models.LoginView, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "190652925",
        "prototype_hash": "2908379184",
        "flaw_hash": "190652925",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/352.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1085,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable Concat(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.PostLogin.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 89,
          "function_name": "PostLogin",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostLogin",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostLogin(Models.LoginView, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "190652925",
        "prototype_hash": "2908379184",
        "flaw_hash": "2626691267",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1363179862",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "883329254",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Redirect",
      "issue_id": 1064,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Redirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable ReturnUrl. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.PostLogin.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 119,
          "function_name": "PostLogin",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostLogin",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostLogin(Models.LoginView, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "190652925",
        "prototype_hash": "2908379184",
        "flaw_hash": "1663307696",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/601.html"
    },
    {
      "title": "PostProfile",
      "issue_id": 1001,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Cross-Site Request Forgery (CSRF)",
      "cwe_id": "352",
      "display_text": "\u003cspan\u003eThe ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostProfile() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.\u003c/span\u003e\u003cspan\u003eMake sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateAntiForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It\u0027s also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352.html\"\u003eCWE\u003c/a\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\"\u003ePrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core\u003c/a\u003e\u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 173,
          "function_name": "PostProfile",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostProfile",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostProfile(string, string, string, Microsoft.AspNetCore.Http.IFormFile)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "3048733705",
        "prototype_hash": "3187933332",
        "flaw_hash": "3048733705",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/352.html"
    },
    {
      "title": "system_runtime_dll.System.IO.File.Delete",
      "issue_id": 1032,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to system_runtime_dll.System.IO.File.Delete() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to Delete() contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.PostProfile.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 232,
          "function_name": "PostProfile",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostProfile",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostProfile(string, string, string, Microsoft.AspNetCore.Http.IFormFile)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "3048733705",
        "prototype_hash": "3187933332",
        "flaw_hash": "1728330308",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/73.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1075,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable Concat(). The tainted data originated from earlier calls to app_dll.Verademo.Controllers.AccountController.PostProfile, and app_dll.VirtualController.vc_mvcentry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 235,
          "function_name": "PostProfile",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostProfile",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostProfile(string, string, string, Microsoft.AspNetCore.Http.IFormFile)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "3048733705",
        "prototype_hash": "3187933332",
        "flaw_hash": "345528286",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4188929132",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "437949691",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Content",
      "issue_id": 1035,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Content() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Content() contains tainted data from the variable Format(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.PostProfile.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 246,
          "function_name": "PostProfile",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostProfile",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostProfile(string, string, string, Microsoft.AspNetCore.Http.IFormFile)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "3048733705",
        "prototype_hash": "3187933332",
        "flaw_hash": "228633270",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "999088589",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "945712489",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1073,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable Concat(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.GetPasswordHint.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 263,
          "function_name": "GetPasswordHint",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.GetPasswordHint",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult GetPasswordHint(string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4215793973",
        "prototype_hash": "876154128",
        "flaw_hash": "1041256764",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3521035042",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2255204426",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Content",
      "issue_id": 1037,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Content() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Content() contains tainted data from the variable Concat(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.GetPasswordHint.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 277,
          "function_name": "GetPasswordHint",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.GetPasswordHint",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult GetPasswordHint(string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4215793973",
        "prototype_hash": "876154128",
        "flaw_hash": "1461941822",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3627370685",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "354680165",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Content",
      "issue_id": 1036,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Content() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Content() contains tainted data from the variable Concat(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.GetPasswordHint.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 282,
          "function_name": "GetPasswordHint",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.GetPasswordHint",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult GetPasswordHint(string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4215793973",
        "prototype_hash": "876154128",
        "flaw_hash": "3286385934",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3350777749",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2872942187",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Content",
      "issue_id": 1038,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.Content() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Content() contains tainted data from the variable Format(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.GetPasswordHint.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 285,
          "function_name": "GetPasswordHint",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.GetPasswordHint",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult GetPasswordHint(string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "4215793973",
        "prototype_hash": "876154128",
        "flaw_hash": "2502168189",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3843441258",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3119681521",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/80.html"
    },
    {
      "title": "system_runtime_dll.System.IO.File.Move",
      "issue_id": 1034,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to system_runtime_dll.System.IO.File.Move() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to Move() contains tainted data. The tainted data originated from earlier calls to app_dll.Verademo.Controllers.AccountController.PostProfile, and app_dll.VirtualController.vc_mvcentry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 335,
          "function_name": "UpdateUsername",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.UpdateUsername",
          "function_prototype": "bool UpdateUsername(string, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "3461646224",
        "prototype_hash": "564177576",
        "flaw_hash": "239218340",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/73.html"
    },
    {
      "title": "system_runtime_dll.System.IO.File.Move",
      "issue_id": 1033,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to system_runtime_dll.System.IO.File.Move() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to Move() contains tainted data. The tainted data originated from earlier calls to app_dll.Verademo.Controllers.AccountController.PostProfile, app_dll.VirtualController.vc_mvcentry, microsoft_aspnetcore_http_abstractions_dll.Microsoft.AspNetCore.Http.HttpContext.get_Session, and app_dll.Verademo.Controllers.AccountController.PostRegister.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 335,
          "function_name": "UpdateUsername",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.UpdateUsername",
          "function_prototype": "bool UpdateUsername(string, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "3461646224",
        "prototype_hash": "564177576",
        "flaw_hash": "239218340",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/73.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1074,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_dll.Verademo.Controllers.AccountController.PostProfile, app_dll.VirtualController.vc_mvcentry, microsoft_aspnetcore_http_abstractions_dll.Microsoft.AspNetCore.Http.HttpContext.get_Session, and app_dll.Verademo.Controllers.AccountController.PostRegister.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 363,
          "function_name": "PopulateProfileViewModel",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PopulateProfileViewModel",
          "function_prototype": "void PopulateProfileViewModel(System.Data.Common.DbConnection, string, Models.ProfileViewModel)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "76961540",
        "prototype_hash": "2898892725",
        "flaw_hash": "1486957064",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1072,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable Concat(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.DownloadProfileImage.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 394,
          "function_name": "DownloadProfileImage",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.DownloadProfileImage",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult DownloadProfileImage(string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "2368682564",
        "prototype_hash": "784139286",
        "flaw_hash": "1792450131",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4130207866",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1290272233",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile",
      "issue_id": 1088,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to microsoft_aspnetcore_mvc_core_dll.Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to PhysicalFile() contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.AccountController.DownloadProfileImage.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 396,
          "function_name": "DownloadProfileImage",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.DownloadProfileImage",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult DownloadProfileImage(string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "2368682564",
        "prototype_hash": "784139286",
        "flaw_hash": "2397595444",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4192179261",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/73.html"
    },
    {
      "title": "PostRegister",
      "issue_id": 1002,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Cross-Site Request Forgery (CSRF)",
      "cwe_id": "352",
      "display_text": "\u003cspan\u003eThe ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostRegister() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.\u003c/span\u003e\u003cspan\u003eMake sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateAntiForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It\u0027s also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352.html\"\u003eCWE\u003c/a\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\"\u003ePrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core\u003c/a\u003e\u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 409,
          "function_name": "PostRegister",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostRegister",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostRegister(string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "21268091",
        "prototype_hash": "4123354431",
        "flaw_hash": "21268091",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/352.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1076,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_dll.Verademo.Controllers.AccountController.PostProfile, app_dll.VirtualController.vc_mvcentry, microsoft_aspnetcore_http_abstractions_dll.Microsoft.AspNetCore.Http.HttpContext.get_Session, and app_dll.Verademo.Controllers.AccountController.PostRegister.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 453,
          "function_name": "RetrieveMyEvents",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.RetrieveMyEvents",
          "function_prototype": "System.Collections.Generic.List\u003cstring\u003e RetrieveMyEvents(System.Data.Common.DbConnection, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "660987123",
        "prototype_hash": "3418887854",
        "flaw_hash": "1486957064",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "PostRegisterFinish",
      "issue_id": 1018,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
      "cwe_id": "915",
      "display_text": "\u003cspan\u003e.NET MVC uses a feature called Model Binding to automatically map HTTP POST Form parameters to a Model indicated by the type specified in the Controller Action\u0027s method argument. Since all HTTP POST data could be under the control of an attacker, additional values may be included beyond those intended. If those additional POST parameters match the names of attributes on the model, they may be updated as well.\u003c/span\u003e \u003cspan\u003eExplicitly specify which of the Model\u0027s attributes should be accessible using the Bind attribute by setting the Include property to each allowable property. If it is not feasible to use the preferred property Include, instead specify which attributes should not be accessible using the Bind attribute and setting the Exclude property to each prohibited property. Keep in mind that when choosing to exclude properties the issue will not be resolved due to possible future additions/changes of properties on the Model.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/915.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/implementing-basic-crud-functionality-with-the-entity-framework-in-asp-net-mvc-application#overpost\"\u003eSee Security Note on Implementing Basic CRUD Functionality with the Entity Framework in ASP.NET MVC Application\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 514,
          "function_name": "PostRegisterFinish",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostRegisterFinish",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostRegisterFinish(Models.User, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "456647811",
        "prototype_hash": "3155203789",
        "flaw_hash": "456647811",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/915.html"
    },
    {
      "title": "PostRegisterFinish",
      "issue_id": 1003,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Cross-Site Request Forgery (CSRF)",
      "cwe_id": "352",
      "display_text": "\u003cspan\u003eThe ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostRegisterFinish() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.\u003c/span\u003e\u003cspan\u003eMake sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateAntiForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It\u0027s also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352.html\"\u003eCWE\u003c/a\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\"\u003ePrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core\u003c/a\u003e\u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 514,
          "function_name": "PostRegisterFinish",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostRegisterFinish",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostRegisterFinish(Models.User, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "456647811",
        "prototype_hash": "3155203789",
        "flaw_hash": "456647811",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/352.html"
    },
    {
      "title": "system_runtime_dll.System.IO.File.Copy",
      "issue_id": 1024,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to system_runtime_dll.System.IO.File.Copy() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to Copy() contains tainted data from the variable Concat(). The tainted data originated from an earlier call to app_dll.VirtualController.vc_mvcentry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 540,
          "function_name": "PostRegisterFinish",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostRegisterFinish",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostRegisterFinish(Models.User, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "456647811",
        "prototype_hash": "3155203789",
        "flaw_hash": "1950448665",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1212104874",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2033517053",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/73.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1071,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.BlabController.PostBlabbers.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/removeaccountcommand.cs",
          "line": 30,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.RemoveAccountCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.RemoveAccountCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "283295601",
        "prototype_hash": "3733745774",
        "flaw_hash": "1486957064",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 1,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1083,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, app_dll.Verademo.Controllers.BlabController.PostBlabbers, and system_data_common_dll.System.Data.Common.DbCommand.ExecuteScalar.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/removeaccountcommand.cs",
          "line": 36,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.RemoveAccountCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.RemoveAccountCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "283295601",
        "prototype_hash": "3733745774",
        "flaw_hash": "1486957064",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1086,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.BlabController.PostBlabbers.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/removeaccountcommand.cs",
          "line": 41,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.RemoveAccountCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.RemoveAccountCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "283295601",
        "prototype_hash": "3733745774",
        "flaw_hash": "1486957064",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1070,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, app_dll.Verademo.Controllers.BlabController.PostBlabbers, and system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/listencommand.cs",
          "line": 52,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.ListenCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.ListenCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "1440191860",
        "prototype_hash": "123701533",
        "flaw_hash": "1486957064",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1082,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.BlabController.PostBlabbers.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/ignorecommand.cs",
          "line": 32,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.IgnoreCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.IgnoreCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "2246419784",
        "prototype_hash": "228764203",
        "flaw_hash": "1486957064",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "log4net_dll.log4net.ILog.Info",
      "issue_id": 1069,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, app_dll.Verademo.Controllers.BlabController.PostBlabbers, and system_data_common_dll.System.Data.Common.DbCommand.ExecuteScalar.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers?tocId\u003dnYnZqAenFFZmB75MQrZwuA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/commands/ignorecommand.cs",
          "line": 43,
          "function_name": "Execute",
          "qualified_function_name": "app_dll.Verademo.Commands.IgnoreCommand.Execute",
          "function_prototype": "void Execute(string)",
          "scope": "app_dll.Verademo.Commands.IgnoreCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "2246419784",
        "prototype_hash": "228764203",
        "flaw_hash": "1486957064",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "748381785",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/117.html"
    },
    {
      "title": "get_UserName",
      "issue_id": 1012,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 2,
      "issue_type_id": "crypto",
      "issue_type": "ASP.NET Misconfiguration: Improper Model Validation",
      "cwe_id": "1174",
      "display_text": "\u003cspan\u003eThe Controller\u0027s Action has a model that fails to perform Model Validation due to a lack of Data Annotations on the Model. This could expose the application to other weaknesses related to insufficient input validation.\u003c/span\u003e \u003cspan\u003eBe sure to add Data Annotation attributes on each property of the Model. For example, to validate a credit card number use the CreditCardAttribute. For validation that is more flexible use RegularExpressionAttribute or CustomValidationAttribute. These data annotations can be found in the System.ComponentModel.DataAnnotations namespace. Note: This flaw used to be reported as CWE 100, which has been deprecated by MITRE.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1174.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation\"\u003eModels and Validation in ASP.NET Core MVC\u003c/a\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/ee256141(v\u003dvs.100).aspx\"\u003eHow to: Validate Model Data Using DataAnnotations Attributes\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/model-validation-in-aspnet-web-api\"\u003eModel Validation in ASP.NET Web API\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/models/user.cs",
          "line": 10,
          "function_name": "get_UserName",
          "qualified_function_name": "app_dll.Verademo.Models.User.get_UserName",
          "function_prototype": "string get_UserName()",
          "scope": "app_dll.Verademo.Models.User"
        }
      },
      "flaw_match": {
        "procedure_hash": "2026506553",
        "prototype_hash": "3850940339",
        "flaw_hash": "2026506553",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/1174.html"
    },
    {
      "title": "get_BlabName",
      "issue_id": 1013,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 2,
      "issue_type_id": "crypto",
      "issue_type": "ASP.NET Misconfiguration: Improper Model Validation",
      "cwe_id": "1174",
      "display_text": "\u003cspan\u003eThe Controller\u0027s Action has a model that fails to perform Model Validation due to a lack of Data Annotations on the Model. This could expose the application to other weaknesses related to insufficient input validation.\u003c/span\u003e \u003cspan\u003eBe sure to add Data Annotation attributes on each property of the Model. For example, to validate a credit card number use the CreditCardAttribute. For validation that is more flexible use RegularExpressionAttribute or CustomValidationAttribute. These data annotations can be found in the System.ComponentModel.DataAnnotations namespace. Note: This flaw used to be reported as CWE 100, which has been deprecated by MITRE.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1174.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation\"\u003eModels and Validation in ASP.NET Core MVC\u003c/a\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/ee256141(v\u003dvs.100).aspx\"\u003eHow to: Validate Model Data Using DataAnnotations Attributes\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/model-validation-in-aspnet-web-api\"\u003eModel Validation in ASP.NET Web API\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/models/user.cs",
          "line": 11,
          "function_name": "get_BlabName",
          "qualified_function_name": "app_dll.Verademo.Models.User.get_BlabName",
          "function_prototype": "string get_BlabName()",
          "scope": "app_dll.Verademo.Models.User"
        }
      },
      "flaw_match": {
        "procedure_hash": "2026506553",
        "prototype_hash": "3850940339",
        "flaw_hash": "2026506553",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/1174.html"
    },
    {
      "title": "get_RealName",
      "issue_id": 1014,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 2,
      "issue_type_id": "crypto",
      "issue_type": "ASP.NET Misconfiguration: Improper Model Validation",
      "cwe_id": "1174",
      "display_text": "\u003cspan\u003eThe Controller\u0027s Action has a model that fails to perform Model Validation due to a lack of Data Annotations on the Model. This could expose the application to other weaknesses related to insufficient input validation.\u003c/span\u003e \u003cspan\u003eBe sure to add Data Annotation attributes on each property of the Model. For example, to validate a credit card number use the CreditCardAttribute. For validation that is more flexible use RegularExpressionAttribute or CustomValidationAttribute. These data annotations can be found in the System.ComponentModel.DataAnnotations namespace. Note: This flaw used to be reported as CWE 100, which has been deprecated by MITRE.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1174.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation\"\u003eModels and Validation in ASP.NET Core MVC\u003c/a\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/ee256141(v\u003dvs.100).aspx\"\u003eHow to: Validate Model Data Using DataAnnotations Attributes\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/model-validation-in-aspnet-web-api\"\u003eModel Validation in ASP.NET Web API\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/models/user.cs",
          "line": 12,
          "function_name": "get_RealName",
          "qualified_function_name": "app_dll.Verademo.Models.User.get_RealName",
          "function_prototype": "string get_RealName()",
          "scope": "app_dll.Verademo.Models.User"
        }
      },
      "flaw_match": {
        "procedure_hash": "2026506553",
        "prototype_hash": "3850940339",
        "flaw_hash": "2026506553",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/1174.html"
    },
    {
      "title": "get_Password",
      "issue_id": 1015,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 2,
      "issue_type_id": "crypto",
      "issue_type": "ASP.NET Misconfiguration: Improper Model Validation",
      "cwe_id": "1174",
      "display_text": "\u003cspan\u003eThe Controller\u0027s Action has a model that fails to perform Model Validation due to a lack of Data Annotations on the Model. This could expose the application to other weaknesses related to insufficient input validation.\u003c/span\u003e \u003cspan\u003eBe sure to add Data Annotation attributes on each property of the Model. For example, to validate a credit card number use the CreditCardAttribute. For validation that is more flexible use RegularExpressionAttribute or CustomValidationAttribute. These data annotations can be found in the System.ComponentModel.DataAnnotations namespace. Note: This flaw used to be reported as CWE 100, which has been deprecated by MITRE.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1174.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation\"\u003eModels and Validation in ASP.NET Core MVC\u003c/a\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/ee256141(v\u003dvs.100).aspx\"\u003eHow to: Validate Model Data Using DataAnnotations Attributes\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/model-validation-in-aspnet-web-api\"\u003eModel Validation in ASP.NET Web API\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/models/user.cs",
          "line": 13,
          "function_name": "get_Password",
          "qualified_function_name": "app_dll.Verademo.Models.User.get_Password",
          "function_prototype": "string get_Password()",
          "scope": "app_dll.Verademo.Models.User"
        }
      },
      "flaw_match": {
        "procedure_hash": "2026506553",
        "prototype_hash": "3850940339",
        "flaw_hash": "2026506553",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/1174.html"
    },
    {
      "title": "get_PasswordHint",
      "issue_id": 1016,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 2,
      "issue_type_id": "crypto",
      "issue_type": "ASP.NET Misconfiguration: Improper Model Validation",
      "cwe_id": "1174",
      "display_text": "\u003cspan\u003eThe Controller\u0027s Action has a model that fails to perform Model Validation due to a lack of Data Annotations on the Model. This could expose the application to other weaknesses related to insufficient input validation.\u003c/span\u003e \u003cspan\u003eBe sure to add Data Annotation attributes on each property of the Model. For example, to validate a credit card number use the CreditCardAttribute. For validation that is more flexible use RegularExpressionAttribute or CustomValidationAttribute. These data annotations can be found in the System.ComponentModel.DataAnnotations namespace. Note: This flaw used to be reported as CWE 100, which has been deprecated by MITRE.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1174.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation\"\u003eModels and Validation in ASP.NET Core MVC\u003c/a\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/ee256141(v\u003dvs.100).aspx\"\u003eHow to: Validate Model Data Using DataAnnotations Attributes\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/model-validation-in-aspnet-web-api\"\u003eModel Validation in ASP.NET Web API\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/models/user.cs",
          "line": 14,
          "function_name": "get_PasswordHint",
          "qualified_function_name": "app_dll.Verademo.Models.User.get_PasswordHint",
          "function_prototype": "string get_PasswordHint()",
          "scope": "app_dll.Verademo.Models.User"
        }
      },
      "flaw_match": {
        "procedure_hash": "2026506553",
        "prototype_hash": "3850940339",
        "flaw_hash": "2026506553",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/1174.html"
    },
    {
      "title": "get_Password",
      "issue_id": 1010,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 2,
      "issue_type_id": "crypto",
      "issue_type": "ASP.NET Misconfiguration: Improper Model Validation",
      "cwe_id": "1174",
      "display_text": "\u003cspan\u003eThe Controller\u0027s Action has a model that fails to perform Model Validation due to a lack of Data Annotations on the Model. This could expose the application to other weaknesses related to insufficient input validation.\u003c/span\u003e \u003cspan\u003eBe sure to add Data Annotation attributes on each property of the Model. For example, to validate a credit card number use the CreditCardAttribute. For validation that is more flexible use RegularExpressionAttribute or CustomValidationAttribute. These data annotations can be found in the System.ComponentModel.DataAnnotations namespace. Note: This flaw used to be reported as CWE 100, which has been deprecated by MITRE.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1174.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation\"\u003eModels and Validation in ASP.NET Core MVC\u003c/a\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/ee256141(v\u003dvs.100).aspx\"\u003eHow to: Validate Model Data Using DataAnnotations Attributes\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/model-validation-in-aspnet-web-api\"\u003eModel Validation in ASP.NET Web API\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/models/loginviewmodel.cs",
          "line": 11,
          "function_name": "get_Password",
          "qualified_function_name": "app_dll.Verademo.Models.LoginView.get_Password",
          "function_prototype": "string get_Password()",
          "scope": "app_dll.Verademo.Models.LoginView"
        }
      },
      "flaw_match": {
        "procedure_hash": "2026506553",
        "prototype_hash": "3850940339",
        "flaw_hash": "2026506553",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/1174.html"
    },
    {
      "title": "get_ReturnURL",
      "issue_id": 1011,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 2,
      "issue_type_id": "crypto",
      "issue_type": "ASP.NET Misconfiguration: Improper Model Validation",
      "cwe_id": "1174",
      "display_text": "\u003cspan\u003eThe Controller\u0027s Action has a model that fails to perform Model Validation due to a lack of Data Annotations on the Model. This could expose the application to other weaknesses related to insufficient input validation.\u003c/span\u003e \u003cspan\u003eBe sure to add Data Annotation attributes on each property of the Model. For example, to validate a credit card number use the CreditCardAttribute. For validation that is more flexible use RegularExpressionAttribute or CustomValidationAttribute. These data annotations can be found in the System.ComponentModel.DataAnnotations namespace. Note: This flaw used to be reported as CWE 100, which has been deprecated by MITRE.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1174.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation\"\u003eModels and Validation in ASP.NET Core MVC\u003c/a\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/ee256141(v\u003dvs.100).aspx\"\u003eHow to: Validate Model Data Using DataAnnotations Attributes\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/model-validation-in-aspnet-web-api\"\u003eModel Validation in ASP.NET Web API\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/models/loginviewmodel.cs",
          "line": 12,
          "function_name": "get_ReturnURL",
          "qualified_function_name": "app_dll.Verademo.Models.LoginView.get_ReturnURL",
          "function_prototype": "string get_ReturnURL()",
          "scope": "app_dll.Verademo.Models.LoginView"
        }
      },
      "flaw_match": {
        "procedure_hash": "1510674785",
        "prototype_hash": "3850940339",
        "flaw_hash": "1510674785",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/1174.html"
    },
    {
      "title": "PostRegisterFinish",
      "issue_id": 1019,
      "image_path": "/tmp/tmpp2j56oms/binary/Verademo-dotnet_1722457914189_zip/app.dll",
      "gob": "B",
      "severity": 2,
      "issue_type_id": "crypto",
      "issue_type": "ASP.NET Misconfiguration: Improper Model Validation",
      "cwe_id": "1174",
      "display_text": "\u003cspan\u003eThe Controller\u0027s Action has a model that fails to perform Model Validation. This could expose the application to other weaknesses related to insufficient input validation.\u003c/span\u003e \u003cspan\u003eBe sure to check the ModelState.IsValid property in the Controller Action before using the data contained within the model. Note: This flaw used to be reported as CWE 100, which has been deprecated by MITRE.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1174.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation\"\u003eModels and Validation in ASP.NET Core MVC\u003c/a\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/dd410405(v\u003dvs.100).aspx\"\u003eModels and Validation in ASP.NET MVC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/kliu/verademo-dotnetcore/app/controllers/accountcontroller.cs",
          "line": 514,
          "function_name": "PostRegisterFinish",
          "qualified_function_name": "app_dll.Verademo.Controllers.AccountController.PostRegisterFinish",
          "function_prototype": "Microsoft.AspNetCore.Mvc.ActionResult PostRegisterFinish(Models.User, string)",
          "scope": "app_dll.Verademo.Controllers.AccountController"
        }
      },
      "flaw_match": {
        "procedure_hash": "456647811",
        "prototype_hash": "3155203789",
        "flaw_hash": "456647811",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      },
      "stack_dumps": {},
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v5/net/1174.html"
    }
  ],
  "selected_modules": [],
  "pipeline_scan": "24.7.1-0",
  "dev_stage": "DEVELOPMENT"
}